chromo
labyrinth
current_row <- 1
current_column <- 1
for(steps in 1:path_length) {
if
(
(current_row == 1 && chromo[steps] ==  2) ||
(current_row == lab_size && chromo[steps] ==  1) ||
(current_column == 1 && chromo[steps] ==  4) ||
(current_column == lab_size && chromo[steps] ==  3) ||
(steps != 1 && labyrinth[current_row , current_column] == 1)
)
{ break
(current_row <- current_row +1)
} else if (chromo[steps] == 2) {
(current_row <- current_row - 1)
} else if (chromo[steps] == 3) {
(current_column <- current_column + 1)
} else if (chromo[steps] == 4) {
(current_column <- current_column - 1)
}
}
to_exit <- (lab_size * 2) - (current_column + current_row)
steps; current_row; current_column; to_exit
chromo
labyrinth
save.image("D:/INF/Rstudio/Labyrinth/lab_environment.RData")
savehistory("D:/INF/Rstudio/Labyrinth/labyrinth_hist.Rhistory")
getwd(0)
getwd()
setwd(D:\"Mgr_Inf\Rstudio"")
setwd("D:\Mgr_Inf\Rstudio"")
setwd("d:\Mgr_Inf\Rstudio"")
setwd("d:/Mgr_Inf/Rstudio"")
setwd("d:/Mgr_Inf/Rstudio"")
setwd("d:/Mgr_Inf/Rstudio")
gwtwd()
getwd()
savehistory("D:/Mgr_Inf/Rstudio/history_20180711.Rhistory")
save.image("D:/Mgr_Inf/Rstudio/environment_20180711.RData")
library(genalg)
chromo
labyrinth
set_exit <- function(x) {x[nrow(x),ncol(x)] <- 0 ;x}
set_exit(labyrinth)
labyrinth[10,10] <- 5
labyrinth
set_exit(labyrinth)
clear_start_and_exit <- function(x) {x[nrow(x),ncol(x)] <- 0 ; x [1 , 1] <- 0 ; x }
clear_start_and_exit(labyrinth)
labyrinth[10,10] <- 5
labyrinth
labyrinth[1,1] <- 5
labyrinth
clear_start_and_exit(labyrinth)
lab_size <- as.integer(readline(prompt = "Podaj rozmiar labiryntu:"))
labyrinth <- generate_lab(lab_size)
labyrinth
clear_start_and_exit(labyrinth)
labyrinth[1,2] <- 0
labyrinth
clear_start_and_exit(labyrinth)
labyrinth
clear_start_and_exit(labyrinth)
labyrinth
set_exit(labyrinth)
labyrinth
clear_start_and_exit <- function(x) {x[nrow(x),ncol(x)] <- 0 ; x [1 , 1] <- 0 ; x }
clear_start_and_exit(labyrinth)
labyrinth
clear_start_and_exit <- function(x) {x[nrow(x),ncol(x)] <- 0 ; x [1 , 1] <- 0 ; x }
clear_start_and_exit <- function(x) {x[nrow(x),ncol(x)] <- 0 ; x[1,1] <- 0}
clear_start_and_exit(labyrinth)
labyrinth
set_exit(labyrinth)
labyrinth
labyrinth <- generate_lab(lab_size)
labyrinth
clear_start_and_exit(labyrinth)
labyrinth
set_exit(labyrinth)
set_exit(labyrinth)
set_exit(labyrinth)
set_exit(labyrinth)
labyrinth
labyrinth[1,1] <- 5
labyrinth[10,10] <- 5
labyrinth
labyrinth[12,12] <- 5
labyrinth
set_exit(labyrinth)
labyrinth
labyrinth
labyrinth[nrow(labyrinth),ncol(labyrinth)] <- 0
labyrinth
labyrinth[10,10 <- 0
labyrinth[10,10] <- 0
labyrinth[10,10] <- 0
labyrinth
labyrinth[1,1] <- 0
labyrinth
labyrinth[12,11] <- 0
labyrinth[12,11] <- 0; labyrinth
labyrinth[5,8] <- 0; labyrinth
labyrinth[7,9] <- 0; labyrinth
path_length <- lab_size * 4
chromo <- round(runif(path_length,1,4), 0)
chromo
current_row <- 1
current_column <- 1
evaluator <- function(chromo) {
for(steps in 1:path_length) {
if
(
(current_row == 1 && chromo[steps] ==  2) ||
(current_row == lab_size && chromo[steps] ==  1) ||
(current_column == 1 && chromo[steps] ==  4) ||
(current_column == lab_size && chromo[steps] ==  3) ||
(steps != 1 && labyrinth[current_row , current_column] == 1)
)
{ break
} else if (chromo[steps] == 1) {
(current_row <- current_row +1)
} else if (chromo[steps] == 2) {
(current_row <- current_row - 1)
} else if (chromo[steps] == 3) {
(current_column <- current_column + 1)
} else if (chromo[steps] == 4) {
(current_column <- current_column - 1)
}
result <- {(lab_size * 2) - (current_column + current_row)}
return(result)
}
}
evaluator <- function(string=c()) {
for(steps in 1:path_length) {
if
(
(current_row == 1 && chromo[steps] ==  2) ||
(current_row == lab_size && chromo[steps] ==  1) ||
(current_column == 1 && chromo[steps] ==  4) ||
(current_column == lab_size && chromo[steps] ==  3) ||
(steps != 1 && labyrinth[current_row , current_column] == 1)
)
{ break
} else if (chromo[steps] == 1) {
(current_row <- current_row +1)
} else if (chromo[steps] == 2) {
(current_row <- current_row - 1)
} else if (chromo[steps] == 3) {
(current_column <- current_column + 1)
} else if (chromo[steps] == 4) {
(current_column <- current_column - 1)
}
result <- {(lab_size * 2) - (current_column + current_row)}
return(result)
}
}
evaluator(chromo)
evaluator_f <- function(string=c()) {
for(steps in 1:path_length) {
if
(
(current_row == 1 && chromo[steps] ==  2) ||
(current_row == lab_size && chromo[steps] ==  1) ||
(current_column == 1 && chromo[steps] ==  4) ||
(current_column == lab_size && chromo[steps] ==  3) ||
(steps != 1 && labyrinth[current_row , current_column] == 1)
)
{ break
} else if (chromo[steps] == 1) {
(current_row <- current_row +1)
} else if (chromo[steps] == 2) {
(current_row <- current_row - 1)
} else if (chromo[steps] == 3) {
(current_column <- current_column + 1)
} else if (chromo[steps] == 4) {
(current_column <- current_column - 1)
}
result <- {(lab_size * 2) - (current_column + current_row)}
return(result)
}
}
evaluator_f(chromo)
chromo
current_row <- 1
current_column <- 1
evaluator_f <- function(string=c()) {
current_row <- 1
current_column <- 1
for(steps in 1:path_length) {
if
(
(current_row == 1 && chromo[steps] ==  2) ||
(current_row == lab_size && chromo[steps] ==  1) ||
(current_column == 1 && chromo[steps] ==  4) ||
(current_column == lab_size && chromo[steps] ==  3) ||
(steps != 1 && labyrinth[current_row , current_column] == 1)
)
{ break
} else if (chromo[steps] == 1) {
(current_row <- current_row +1)
} else if (chromo[steps] == 2) {
(current_row <- current_row - 1)
} else if (chromo[steps] == 3) {
(current_column <- current_column + 1)
} else if (chromo[steps] == 4) {
(current_column <- current_column - 1)
}
result <- {(lab_size * 2) - (current_column + current_row)}
return(result)
}
}
evaluator_f(chromo)
steps; current_row; current_column; to_exit
to_exit <- (lab_size * 2) - (current_column + current_row)
steps; current_row; current_column; to_exit
result
result
result
evaluator_f(chromo)
evaluator_f <- function(string=c()) {
current_row <- 1
current_column <- 1
for(steps in 1:path_length) {
if
(
(current_row == 1 && chromo[steps] ==  2) ||
(current_row == lab_size && chromo[steps] ==  1) ||
(current_column == 1 && chromo[steps] ==  4) ||
(current_column == lab_size && chromo[steps] ==  3) ||
(steps != 1 && labyrinth[current_row , current_column] == 1)
)
{ break
} else if (chromo[steps] == 1) {
(current_row <- current_row +1)
} else if (chromo[steps] == 2) {
(current_row <- current_row - 1)
} else if (chromo[steps] == 3) {
(current_column <- current_column + 1)
} else if (chromo[steps] == 4) {
(current_column <- current_column - 1)
}
result <- {(lab_size * 2) - (current_column + current_row) + (steps/2)}
return(result)
}
}
evaluator_f(chromo)
rbga(stringMin = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
stringMax = c(4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4),
evalFunc=evaluator, verbose=TRUE, mutationChance=0.1, suggestions=NULL,
popSize=200, iters=100,elitism=TRUE, monitorFunc=NULL)
summary.rbga
plot.rbga
rbga.results = rbga(stringMin = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
stringMax = c(4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4),
evalFunc=evaluator, verbose=TRUE, mutationChance=0.1, suggestions=NULL,
popSize=200, iters=100,elitism=TRUE, monitorFunc=NULL)
rbga.results.summary
summary(rbga.results)
plot(rbga.results)
rbga.best
rbga.results
summary(rbga.results, echo=T)
round(1.8)
round(1.5)
round(1.49)
evaluator_f <- function(string=c()) {
current_row <- 1
current_column <- 1
for(steps in 1:path_length) {
if
(
(current_row == 1 && round(chromo[steps]) ==  2) ||
(current_row == lab_size && round(chromo[steps]) ==  1) ||
(current_column == 1 && round(chromo[steps]) ==  4) ||
(current_column == lab_size && round(chromo[steps]) ==  3) ||
(steps != 1 && labyrinth[current_row , current_column] == 1)
)
{ break
} else if (round(chromo[steps]) == 1) {
(current_row <- current_row +1)
} else if (round(chromo[steps]) == 2) {
(current_row <- current_row - 1)
} else if (round(chromo[steps]) == 3) {
(current_column <- current_column + 1)
} else if (round(chromo[steps]) == 4) {
(current_column <- current_column - 1)
}
result <- {(lab_size * 2) - (current_column + current_row) + (steps/2)}
return(result)
}
}
lab_rbga <- rbga(stringMin = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
stringMax = c(4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4),
evalFunc=evaluator, verbose=TRUE, mutationChance=0.1, suggestions=NULL,
popSize=200, iters=100,elitism=TRUE, monitorFunc=NULL)
summary(lab_rbga)
summary(lab_rbga)
lab_rbga
View(rbga.results)
rm(rbga.results)
View(lab_rbga)
View(lab_rbga)
View(lab_rbga)
result
evaluator_f(chromo)
result
chromo <- round(runif(path_length*2,1,4), 0)
chromo
path_length
length(path_length)
length(chromo)
lab_size <- as.integer(readline(prompt = "Podaj rozmiar labiryntu:"))
labyrinth <- generate_lab(lab_size)
labyrinth[nrow(labyrinth),ncol(labyrinth)] <- 0
labyrinth
labyrinth[9,10] <- 0; labyrinth
labyrinth[1,2] <- 0; labyrinth
labyrinth[3,3] <- 0; labyrinth
labyrinth[2,5] <- 0; labyrinth
labyrinth[2,9] <- 0
labyrinth[2,10] <- 0
labyrinth
labyrinth[5,10] <- 1; labyrinth
labyrinth[5:6,8] <- 1; labyrinth
chromo
chromo <- round(runif(path_length*2,0,1), 0)
chromo
#step down - 00
#step up - 01
#step right - 10
#step left - 11
string=chromo
length(string)
lab_size
path_length <- lab_size * 4
chromo <- round(runif(path_length*2,0,1), 0)
chromo
path_length
chromo
evaluator_f <- function(chromo=c()) {
current_row <- 1
current_column <- 1
for(steps in 1:(length(chromo)/2)) {
if
(
(current_row == 1 && chromo[(steps*2-1):(steps*2)] ==  c(0,1)) ||
(current_row == (length(chromo)/4) && chromo[(steps*2-1):(steps*2)] ==  c(0,0)) ||
(current_column == 1 && chromo[(steps*2-1):(steps*2)] ==  c(1,1)) ||
(current_column == (length(chromo)/4) && chromo[(steps*2-1):(steps*2)] ==  c(1,0))
) { break
} else if (chromo[(steps*2-1):(steps*2)] == c(0,0)) {
(current_row <- current_row +1)
} else if (chromo[(steps*2-1):(steps*2)] == c(0,1)) {
(current_row <- current_row - 1)
} else if (chromo[(steps*2-1):(steps*2)] == c(1,0)) {
(current_column <- current_column + 1)
} else if (chromo[(steps*2-1):(steps*2)] == c(1,1)) {
(current_column <- current_column - 1)
}
result <- {(length(chromo)/4) - (current_column + current_row) + (steps/2)}
return(result)
}
}
genalg_lab <- rbga.bin(size=80, popSize=200, iters=100, mutationChance = 0.01,elitism=T, evalFunc = evaluator_f)
genalg_lab <- rbga.bin(size=80, popSize=200, iters=100, mutationChance = 0.01,elitism=T, evalFunc = evaluator_f())
evaluator_f <- function(chromo=c()) {
current_row <- 1
current_column <- 1
for(steps in 1:(length(chromo)/2)) {
if
(
(current_row == 1 && chromo[(steps*2-1):(steps*2)] ==  c(0,1)) ||
(current_row == length(chromo)/4 && chromo[(steps*2-1):(steps*2)] ==  c(0,0)) ||
(current_column == 1 && chromo[(steps*2-1):(steps*2)] ==  c(1,1)) ||
(current_column == length(chromo)/4 && chromo[(steps*2-1):(steps*2)] ==  c(1,0))
) { break
} else if (chromo[(steps*2-1):(steps*2)] == c(0,0)) {
(current_row <- current_row +1)
} else if (chromo[(steps*2-1):(steps*2)] == c(0,1)) {
(current_row <- current_row - 1)
} else if (chromo[(steps*2-1):(steps*2)] == c(1,0)) {
(current_column <- current_column + 1)
} else if (chromo[(steps*2-1):(steps*2)] == c(1,1)) {
(current_column <- current_column - 1)
}
result <- {(length(chromo)/4) - (current_column + current_row) + (steps/2)}
return(result)
}
}
genalg_lab <- rbga.bin(size=80, popSize=200, iters=100, mutationChance = 0.01,elitism=T, evalFunc = evaluator_f())
chromo
c(1,0)
chromo[1:2] == c(1,0)
steps
chromo[(steps*2-1):(steps*2)]
chromo[(steps*2-1):(steps*2)]=[1,1]
chromo[(steps*2-1):(steps*2)]=c(1,1)
chromo[(steps*2-1):(steps*2)]=c(1,1)
chromo[(steps*2-1):(steps*2)]==c(1,1)
evaluator_f <- function(chromo) {
current_row <- 1
current_column <- 1
for(steps in 1:(length(chromo)/2)) {
if
(
(current_row == 1 && chromo[(steps*2-1):(steps*2)] ==  c(0,1)) ||
(current_row == length(chromo)/4 && chromo[(steps*2-1):(steps*2)] ==  c(0,0)) ||
(current_column == 1 && chromo[(steps*2-1):(steps*2)] ==  c(1,1)) ||
(current_column == length(chromo)/4 && chromo[(steps*2-1):(steps*2)] ==  c(1,0))
) { break
} else if (chromo[(steps*2-1):(steps*2)] == c(0,0)) {
(current_row <- current_row +1)
} else if (chromo[(steps*2-1):(steps*2)] == c(0,1)) {
(current_row <- current_row - 1)
} else if (chromo[(steps*2-1):(steps*2)] == c(1,0)) {
(current_column <- current_column + 1)
} else if (chromo[(steps*2-1):(steps*2)] == c(1,1)) {
(current_column <- current_column - 1)
}
return((length(chromo)/4) - (current_column + current_row) + (steps/2))
}
}
genalg_lab <- rbga.bin(size=80, popSize=200, iters=100, mutationChance = 0.1,elitism=T, evalFunc = evaluator_f)
genalg_lab <- rbga.bin(size=80, popSize=200, iters=100, mutationChance = 0.1,elitism=T, evalFunc = evaluator_f)
evaluator_f <- function(chr) {
current_row <- 1
current_column <- 1
for(steps in 1:(length(chr)/2)) {
if
(
(current_row == 1 && chr[(steps*2-1):(steps*2)] ==  c(0,1)) ||
(current_row == length(chr)/4 && chr[(steps*2-1):(steps*2)] ==  c(0,0)) ||
(current_column == 1 && chr[(steps*2-1):(steps*2)] ==  c(1,1)) ||
(current_column == length(chr)/4 && chr[(steps*2-1):(steps*2)] ==  c(1,0))
) { break
} else if (chr[(steps*2-1):(steps*2)] == c(0,0)) {
(current_row <- current_row +1)
} else if (chr[(steps*2-1):(steps*2)] == c(0,1)) {
(current_row <- current_row - 1)
} else if (chr[(steps*2-1):(steps*2)] == c(1,0)) {
(current_column <- current_column + 1)
} else if (chr[(steps*2-1):(steps*2)] == c(1,1)) {
(current_column <- current_column - 1)
}
return(20 - current_column + current_row + (steps/2))
}
}
evaluator_f(chromo)
result <- evaluator_f(chromo)
result
evaluator_f <- function(chr) {
current_row <- 1
current_column <- 1
for(steps in 1:40) {
if
(
(current_row == 1 && chr[(steps*2-1):(steps*2)] ==  c(0,1)) ||
(current_row == length(chr)/4 && chr[(steps*2-1):(steps*2)] ==  c(0,0)) ||
(current_column == 1 && chr[(steps*2-1):(steps*2)] ==  c(1,1)) ||
(current_column == length(chr)/4 && chr[(steps*2-1):(steps*2)] ==  c(1,0))
) { break
} else if (chr[(steps*2-1):(steps*2)] == c(0,0)) {
(current_row <- current_row +1)
} else if (chr[(steps*2-1):(steps*2)] == c(0,1)) {
(current_row <- current_row - 1)
} else if (chr[(steps*2-1):(steps*2)] == c(1,0)) {
(current_column <- current_column + 1)
} else if (chr[(steps*2-1):(steps*2)] == c(1,1)) {
(current_column <- current_column - 1)
}
return(20 - current_column + current_row + (steps/2))
}
}
result <- evaluator_f(chromo)
result
steps
evaluator_f <- function(chr) {
current_row <- 1
current_column <- 1
for(steps in 1:40) {
if
(
(current_row == 1 && chr[(steps*2-1):(steps*2)] ==  c(0,1)) ||
(current_row == length(chr)/4 && chr[(steps*2-1):(steps*2)] ==  c(0,0)) ||
(current_column == 1 && chr[(steps*2-1):(steps*2)] ==  c(1,1)) ||
(current_column == length(chr)/4 && chr[(steps*2-1):(steps*2)] ==  c(1,0))
) { break
} else if (chr[(steps*2-1):(steps*2)] == c(0,0)) {
(current_row <- current_row +1)
} else if (chr[(steps*2-1):(steps*2)] == c(0,1)) {
(current_row <- current_row - 1)
} else if (chr[(steps*2-1):(steps*2)] == c(1,0)) {
(current_column <- current_column + 1)
} else if (chr[(steps*2-1):(steps*2)] == c(1,1)) {
(current_column <- current_column - 1)
}
}
return(20 - current_column + current_row + (steps/2))
}
result <- evaluator_f(chromo)
result
genalg_lab <- rbga.bin(size=80,
popSize=200,
iters=100,
mutationChance = 0.1,
elitism=T,
evalFunc = evaluator_f)
genalg_lab
labyrinth
